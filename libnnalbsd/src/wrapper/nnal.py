# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _nnal
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


mlp_new = _nnal.mlp_new
mlp_back_propagate = _nnal.mlp_back_propagate
mlp_set_learning_rate = _nnal.mlp_set_learning_rate
mlp_delete = _nnal.mlp_delete
mlp_display = _nnal.mlp_display
mlp_get_used_memory = _nnal.mlp_get_used_memory
mlp_load = _nnal.mlp_load
mlp_save = _nnal.mlp_save
mlp_execute = _nnal.mlp_execute
rand1 = _nnal.rand1
hyperbolic = _nnal.hyperbolic
hyperbolic_derivate = _nnal.hyperbolic_derivate
sigmodial = _nnal.sigmodial
sigmodial_derivate = _nnal.sigmodial_derivate
heavyside_derivate = _nnal.heavyside_derivate
heavyside = _nnal.heavyside


